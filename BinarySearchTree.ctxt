#BlueJ class context
comment0.target=BinarySearchTree
comment1.params=
comment1.target=BinarySearchTree()
comment1.text=Create\ a\ default\ binary\ tree
comment10.params=
comment10.target=void\ preorder()
comment10.text=Preorder\ traversal\ from\ the\ root
comment11.params=root
comment11.target=void\ preorder(BinarySearchTree.TreeNode)
comment11.text=Preorder\ traversal\ from\ a\ subtree
comment12.params=
comment12.target=int\ getSize()
comment12.text=Get\ the\ number\ of\ nodes\ in\ the\ tree
comment13.params=
comment13.target=BinarySearchTree.TreeNode\ getRoot()
comment13.text=Returns\ the\ root\ of\ the\ tree
comment14.params=e
comment14.target=java.util.ArrayList\ path(java.lang.Comparable)
comment14.text=Returns\ an\ ArrayList\ containing\ elements\ in\ the\ path\ from\ the\ root\ leading\ to\ the\ specified\ element,\ returns\ an\ empty\ ArrayList\ if\ no\ such\ element\ exists.
comment15.params=e\ list\ current
comment15.target=java.util.ArrayList\ path(java.lang.Comparable,\ java.util.ArrayList,\ BinarySearchTree.TreeNode)
comment16.params=
comment16.target=int\ getNumberOfLeaves()
comment16.text=Returns\ the\ number\ of\ leaf\ nodes\ in\ this\ tree,\ returns\ 0\ if\ tree\ is\ empty
comment17.params=current\ list
comment17.target=java.util.ArrayList\ getNumberOfLeaves(BinarySearchTree.TreeNode,\ java.util.ArrayList)
comment18.params=e
comment18.target=java.util.ArrayList\ leftSubTree(java.lang.Comparable)
comment18.text=Returns\ an\ ArrayList\ containing\ all\ elements\ in\ preorder\ of\ the\ specified\ element\u2019s\ left\ sub-tree,\ returns\ an\ empty\ ArrayList\ if\ no\ such\ element\ exists.
comment19.params=e
comment19.target=java.util.ArrayList\ rightSubTree(java.lang.Comparable)
comment19.text=Returns\ an\ ArrayList\ containing\ all\ elements\ in\ preorder\ of\ the\ specified\ element\u2019s\ right\ sub-tree,\ returns\ an\ empty\ ArrayList\ if\ no\ such\ element\ exists.
comment2.params=objects
comment2.target=BinarySearchTree(java.lang.Comparable[])
comment2.text=Create\ a\ binary\ tree\ from\ an\ array\ of\ objects
comment20.params=e
comment20.target=java.lang.Comparable\ inorderPredecessor(java.lang.Comparable)
comment20.text=Returns\ the\ inorder\ predecessor\ of\ the\ specified\ element,\ returns\ null\ if\ tree\ is\ empty\ or\ element\ 'e'\ is\ not\ in\ the\ tree.
comment21.params=e\ current\ list
comment21.target=void\ getInorder(java.lang.Comparable,\ BinarySearchTree.TreeNode,\ java.util.ArrayList)
comment22.params=current\ list
comment22.target=void\ getPreOrder(BinarySearchTree.TreeNode,\ java.util.ArrayList)
comment23.params=e
comment23.target=boolean\ delete(java.lang.Comparable)
comment23.text=\ Delete\ an\ element\ from\ the\ binary\ tree.\r\n\ Return\ true\ if\ the\ element\ is\ deleted\ successfully\r\nReturn\ false\ if\ the\ element\ is\ not\ in\ the\ tree
comment24.params=
comment24.target=java.util.Iterator\ iterator()
comment24.text=Obtain\ an\ iterator.\ Use\ inorder.
comment25.params=
comment25.target=java.util.Iterator\ inorderIterator()
comment25.text=Obtain\ an\ inorder\ iterator
comment26.params=
comment26.target=void\ clear()
comment26.text=Remove\ all\ elements\ from\ the\ tree
comment27.params=args
comment27.target=void\ main(java.lang.String[])
comment3.params=e
comment3.target=boolean\ search(java.lang.Comparable)
comment3.text=Returns\ true\ if\ the\ element\ is\ in\ the\ tree
comment4.params=e
comment4.target=boolean\ insert(java.lang.Comparable)
comment4.text=\ Insert\ element\ o\ into\ the\ binary\ tree\r\n\ Return\ true\ if\ the\ element\ is\ inserted\ successfully.\ \r\n\ Uses\ an\ iterative\ algorithm\r\n
comment5.params=e
comment5.target=BinarySearchTree.TreeNode\ createNewNode(java.lang.Comparable)
comment6.params=
comment6.target=void\ inorder()
comment6.text=Inorder\ traversal\ from\ the\ root
comment7.params=root
comment7.target=void\ inorder(BinarySearchTree.TreeNode)
comment7.text=Inorder\ traversal\ from\ a\ subtree
comment8.params=
comment8.target=void\ postorder()
comment8.text=Postorder\ traversal\ from\ the\ root
comment9.params=root
comment9.target=void\ postorder(BinarySearchTree.TreeNode)
comment9.text=Postorder\ traversal\ from\ a\ subtree
numComments=28
